datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String    @unique @default(uuid())
  email      String    @unique @db.Citext
  username   String    @unique @db.Citext
  password   String
  firstName  String?   @default("")
  lastName   String?   @default("")
  bio        String?   @default("")
  website    String?   @default("")
  location   String?   @default("")
  imageUrl   String?   @default("https://firebasestorage.googleapis.com/v0/b/safire-e142f.appspot.com/o/blankpfp.webp?alt=media") // TODO
  created_at DateTime  @default(now()) @map("created_at")
  role       UserRole? @default(USER)
  confirmed  Boolean   @default(false)
  verified   Boolean   @default(false)

  posts    Post[]    @relation("post-user")
  comments Comment[] @relation("comment-user")
  likes    Like[]    @relation("like-user")
  @@map(name: "users")
}

model Post {
  id           String   @unique @default(uuid())
  author       User     @relation("post-user", fields: [authorId], references: [id])
  authorId     String
  body         String
  created_at   DateTime @default(now()) @map("created_at")

  comments      Comment[]      @relation("comment-post")
  likes         Like[]         @relation("like-post")

  @@map(name: "posts")
}

model Comment {
  id         String   @unique @default(uuid())
  authorId   String
  author     User     @relation("comment-user", fields: [authorId], references: [id])
  postId     String
  post       Post     @relation("comment-post", fields: [postId], references: [id])
  body       String
  created_at DateTime @default(now()) @map("created_at")

  @@map(name: "comments")
}

model Notification {
  id         String           @unique @default(uuid())
  recipient  String
  sender     String
  type       NotificationType
  read       Boolean          @default(false)
  created_at DateTime         @default(now()) @map("created_at")
  postId String

  @@map(name: "notifications")
}

model Like {
  id     String @unique @default(uuid())
  post   Post   @relation("like-post", fields: [postId], references: [id])
  user   User   @relation("like-user", fields: [userId], references: [id])
  postId String
  userId String

  @@map(name: "likes")
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  LIKE
  COMMENT
}
