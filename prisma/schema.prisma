datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @unique @default(uuid())
  email        String    @unique @db.Citext
  username     String    @unique @db.Citext
  password     String
  firstName    String?   @default("")
  lastName     String?   @default("")
  bio          String?   @default("")
  website      String?   @default("")
  location     String?   @default("")
  imageUrl     String?   @default("https://firebasestorage.googleapis.com/v0/b/safire-e142f.appspot.com/o/blankpfp.webp?alt=media") // TODO
  bannerImg    String?   @default("https://bit.ly/3tk0bbr")
  created_at   DateTime  @default(now()) @map("created_at")
  role         UserRole? @default(USER)
  confirmed    Boolean   @default(false)
  verified     Boolean   @default(false)
  following    String[]
  public_key   String    @default("")
  enc_priv_key String    @default("")

  posts    Post[]    @relation("post-user")
  comments Comment[] @relation("comment-user")
  likes    Like[]    @relation("like-user")
  messages Message[] @relation("message-user")

  @@map(name: "users")
}

model Post {
  id         String   @unique @default(uuid())
  author     User     @relation("post-user", fields: [authorId], references: [id])
  authorId   String
  body       String
  created_at DateTime @default(now()) @map("created_at")

  comments Comment[] @relation("comment-post")
  likes    Like[]    @relation("like-post")

  @@map(name: "posts")
}

model Comment {
  id         String   @unique @default(uuid())
  authorId   String
  author     User     @relation("comment-user", fields: [authorId], references: [id])
  postId     String
  post       Post     @relation("comment-post", fields: [postId], references: [id])
  body       String
  created_at DateTime @default(now()) @map("created_at")
  likes      Like[]   @relation("like-comment")

  @@map(name: "comments")
}

model Notification {
  id         String           @unique @default(uuid())
  recipient  String
  sender     String
  type       NotificationType
  read       Boolean          @default(false)
  created_at DateTime         @default(now()) @map("created_at")
  postId     String?
  commentId  String?

  @@map(name: "notifications")
}

model Like {
  id        String   @unique @default(uuid())
  post      Post?    @relation("like-post", fields: [postId], references: [id])
  user      User     @relation("like-user", fields: [userId], references: [id])
  postId    String?
  comment   Comment? @relation("like-comment", fields: [commentId], references: [id])
  commentId String?
  userId    String

  @@map(name: "likes")
}

model Message {
  id          String   @unique @default(uuid())
  created_at  DateTime @default(now()) @map("created_at")
  recipientId String
  senderId    String
  sender      User     @relation("message-user", fields: [senderId], references: [id])
  message     String
  read        Boolean  @default(false)

  @@map(name: "messages")
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  LIKE
  COMMENT
  NEW_DM
  FOLLOW
}
